generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String?
  referredBy     String?
  points         Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           UserRole        @default(customer)
  emailVerified  DateTime?
  image          String?
  referralCode   String?         @unique
  accounts       Account[]
  authenticators Authenticator[]
  coupons        Coupon[]
  events         Event[]         @relation("OrganizerEvents")
  reviews        Review[]
  sessions       Session[]
  transactions   Transaction[]

  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  id                String   @id @default(cuid())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  id         String   @id @default(cuid())

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String   @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now())
  id                   String   @id @default(cuid())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Event {
  id            Int           @id @default(autoincrement())
  title         String
   artist String
  genre         String
  startDate     DateTime
  endDate       DateTime
  location      String
  seats         Int
  tiers         Json
  image         String?
  description   String?
  organizerId   String
  averageRating Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  price         Json
  organizer     User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  reviews       Review[]
  transactions  Transaction[]

  @@index([organizerId])
}

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          String
  eventId         Int
  ticketQuantity  Int
  finalPrice      Int
  paymentProof    String?
  createdAt       DateTime          @default(now())
  basePrice       Int
  couponDiscount  Int               @default(0)
  paymentDeadline DateTime
  pointsUsed      Int               @default(0)
  ticketUrl       String?
  tierType        String
  voucherUrl      String?
  status          TransactionStatus @default(PENDING)
  updatedAt       DateTime          @updatedAt
  event           Event             @relation(fields: [eventId], references: [id])
  user            User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([eventId])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    String
  eventId   Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  userId    String
  discount  Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserRole {
  customer
  organizer
}

enum TransactionStatus {
  PENDING
  WAITING_ADMIN
  PAID
  EXPIRED
  CANCELED
}
