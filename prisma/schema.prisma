generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

// Define the enum for roles
enum UserRole {
  customer
  organizer
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  role         UserRole
  referralCode String    @unique
  referredBy   String?   
  points       Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  events       Event[]   @relation("OrganizerEvents")
  transactions Transaction[]
  reviews      Review[]
  coupons      Coupon[]
}

model Event {
  id            Int      @id @default(autoincrement())
  title         String   
  genre         String   
  startDate     DateTime 
  endDate       DateTime 
  location      String   
  seats         Int      
  tiers         Json     
  price         Json     
  image         String?  
  description   String?  
  organizerId   Int
  organizer     User     @relation("OrganizerEvents", fields: [organizerId], references: [id])
  averageRating Float?   
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  reviews       Review[]
  transactions  Transaction[]
}

model Transaction {
  id               Int       @id @default(autoincrement())
  userId           Int
  eventId          Int
  tierType         String
  ticketQuantity   Int
  basePrice        Int       // perâ€‘ticket price before discounts
  couponDiscount   Int       @default(0)
  pointsUsed       Int       @default(0)
  finalPrice       Int
  status           TransactionStatus @default(PENDING)
  paymentProof     String?   // cloudinary URL
  paymentDeadline  DateTime  // 3h after creation
  voucherUrl       String?
  ticketUrl        String?
  createdAt        DateTime  @default(now())

  user             User      @relation(fields: [userId], references: [id])
  event            Event     @relation(fields: [eventId], references: [id])
}

enum TransactionStatus {
  PENDING        // waiting for payment
  WAITING_ADMIN  // payment proof uploaded
  PAID           // admin approved
  EXPIRED
  CANCELED
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  eventId   Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  userId     Int
  discount   Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
}
