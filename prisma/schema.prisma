generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD .svg"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================================================
// USER RELATED MODELS
// ============================================================================

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  password          String?
  referredBy        String?
  points            Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  role              UserRole            @default(customer)
  isAdmin           Boolean             @default(false)
  emailVerified     DateTime?
  image             String?
  referralCode      String?             @unique

  // Authentication related
  accounts          Account[]
  authenticators    Authenticator[]
  sessions          Session[]
  passwordResetTokens PasswordResetToken[]
  
  // Event and transaction related
  events            Event[]             @relation("OrganizerEvents")
  tickets           Ticket[]
  transactions      Transaction[]
  reviews           Review[]
  
  // Promotion and points related
  coupons           Coupon[]
  promotions        Promotion[]
  pointTransactions PointTransaction[]

  @@index([email])
}

model PointTransaction {
  id          String    @id @default(cuid())
  userId      String
  points      Int
  description String?
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  isExpired   Boolean   @default(false)
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

// ============================================================================
// AUTHENTICATION RELATED MODELS
// ============================================================================

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String    @id @default(cuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String    @id @default(cuid())
  credentialID         String    @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  // Relations
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique 
  expires   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token]) 
}

// ============================================================================
// EVENT RELATED MODELS
// ============================================================================

model Event {
  id            Int           @id @default(autoincrement())
  title         String
  artist        String
  genreId       Int
  startDate     DateTime
  endDate       DateTime
  location      String
  countryId     Int
  seats         Int
  tiers         Json
  image         String?
  description   String?
  organizerId   String
  averageRating Float?
  price         Json
  featured      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  genre         Genre         @relation(fields: [genreId], references: [id])
  country       Country       @relation(fields: [countryId], references: [id])
  organizer     User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  
  // Related items
  reviews       Review[]
  transactions  Transaction[]
  tickets       Ticket[]
  promotions    Promotion[]

  @@index([organizerId])
  @@index([genreId])
  @@index([countryId])
}

model Country {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  code      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  events    Event[]
}

model Genre {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  events    Event[]
}

// ============================================================================
// TRANSACTION RELATED MODELS
// ============================================================================

model Transaction {
  id              Int               @id @default(autoincrement())
  userId          String
  eventId         Int
  ticketQuantity  Int
  basePrice       Int
  finalPrice      Int
  couponDiscount  Int               @default(0)
  pointsUsed      Int               @default(0)
  tierType        String
  paymentProof    String?
  ticketUrl       String?
  voucherUrl      String?
  status          TransactionStatus @default(PENDING)
  paymentDeadline DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  promotionId     String?
  couponId        Int?    

  // Relations
  event           Event             @relation(fields: [eventId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  tickets         Ticket[]
  promotion       Promotion?        @relation(fields: [promotionId], references: [id])
  coupon          Coupon?           @relation(fields: [couponId], references: [id])

  @@index([userId])
  @@index([eventId])
  @@index([promotionId])
  @@index([couponId])
}

model Ticket {
  id             String    @id @default(cuid())
  serialCode     String    @unique
  userId         String
  eventId        Int
  transactionId  Int
  tierType       String
  isUsed         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User      @relation(fields: [userId], references: [id])
  event          Event     @relation(fields: [eventId], references: [id])
  transaction    Transaction @relation(fields: [transactionId], references: [id])

  @@index([userId])
  @@index([eventId])
  @@index([transactionId])
}

model Review {
  id        Int       @id @default(autoincrement())
  userId    String
  eventId   Int
  rating    Int
  comment   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  event     Event     @relation(fields: [eventId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
}

// ============================================================================
// PROMOTION RELATED MODELS
// ============================================================================

model Coupon {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  userId     String
  discount   Int
  discountType DiscountType @default(FIXED_AMOUNT) 
  expiresAt  DateTime
  isReferral Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isUsed     Boolean   @default(false) 

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  transactions Transaction[]

  @@index([userId])
  @@index([userId, isUsed, expiresAt]) 
}

model Promotion {
  id            String        @id @default(cuid())
  code          String        @unique
  eventId       Int
  organizerId   String
  discount      Int           // Percentage or fixed amount discount
  discountType  DiscountType  @default(PERCENTAGE)
  startDate     DateTime
  endDate       DateTime
  usageLimit    Int?          // Optional max number of times promotion can be used
  usageCount    Int           @default(0)
  isActive      Boolean       @default(true)
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  event         Event         @relation(fields: [eventId], references: [id])
  organizer     User          @relation(fields: [organizerId], references: [id])
  transactions  Transaction[]

  @@index([eventId])
  @@index([organizerId])
  @@index([code])
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
  customer
  organizer
}

enum TransactionStatus {
  PENDING
  WAITING_ADMIN
  PAID
  EXPIRED
  CANCELED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}